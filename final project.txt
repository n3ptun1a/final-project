// screens
let currentScreen = "mainMenu";

// mic input
let mic;
let micLevel = 0;

// player
let player;

// level unlocks
let unlockedLevels = [true, false, false];

// current level
let currentLevel = null;

// platforms
let platforms = [];

function setup() {
  createCanvas(800, 600);
  
  // start mic
  mic = new p5.AudioIn();
  mic.start();
  
  // make player
  player = new Player();
}

function draw() {
  background(220);
  
  if (currentScreen === "mainMenu") {
    drawMainMenu();
  } else if (currentScreen === "settings") {
    drawSettings();
  } else if (currentScreen === "info") {
    drawInfo();
  } else if (currentScreen === "levelSelect") {
    drawLevelSelect();
  } else if (currentScreen === "playing") {
    playLevel();
  }
}

function mousePressed() {
  if (currentScreen === "mainMenu") {
    if (mouseY > 200 && mouseY < 250) currentScreen = "levelSelect"; // play
    if (mouseY > 270 && mouseY < 320) currentScreen = "info"; // info
    if (mouseY > 340 && mouseY < 390) currentScreen = "settings"; // settings
  } else if (currentScreen === "levelSelect") {
    if (mouseY > 150 && mouseY < 200 && unlockedLevels[0]) startLevel(1);
    if (mouseY > 220 && mouseY < 270 && unlockedLevels[1]) startLevel(2);
    if (mouseY > 290 && mouseY < 340 && unlockedLevels[2]) startLevel(3);
  }
}

function drawMainMenu() {
  textAlign(CENTER);
  textSize(40);
  text("MIC ADVENTURE", width/2, 100);
  
  textSize(30);
  rect(width/2 - 100, 200, 200, 50);
  text("PLAY", width/2, 235);
  
  rect(width/2 - 100, 270, 200, 50);
  text("INFO", width/2, 305);
  
  rect(width/2 - 100, 340, 200, 50);
  text("SETTINGS", width/2, 375);
}

function drawSettings() {
  textAlign(CENTER);
  textSize(30);
  text("settings screen", width/2, height/2);
}

function drawInfo() {
  textAlign(CENTER);
  textSize(30);
  text("info screen :)", width/2, height/2);
}

function drawLevelSelect() {
  textAlign(CENTER);
  textSize(40);
  text("Select Level", width/2, 80);
  
  textSize(30);
  if (unlockedLevels[0]) text("1-1", width/2, 180); else text("1-1 (Locked)", width/2, 180);
  if (unlockedLevels[1]) text("1-2", width/2, 250); else text("1-2 (Locked)", width/2, 250);
  if (unlockedLevels[2]) text("1-3", width/2, 320); else text("1-3 (Locked)", width/2, 320);
}

function startLevel(levelNum) {
  currentLevel = levelNum;
  currentScreen = "playing";
  
  // make player fresh
  player.reset();
  
  // make platforms
  platforms = [];
  
  if (levelNum === 1) {
    platforms.push(new Platform(0, 550, 800, 50)); // ground
  }
}

function playLevel() {
  // get mic input
  micLevel = mic.getLevel();
  
  player.update();
  player.show();
  
  for (let p of platforms) {
    p.show();
  }
}

class Player {
  constructor() {
    this.reset();
  }
  
  reset() {
    this.x = 50;
    this.y = 500;
    this.vx = 0;
    this.vy = 0;
    this.color = color(255, 255, 0);
  }
  
  update() {
    if (micLevel > 0.01) {
      this.vx += micLevel * 2;
    } else {
      this.vx *= 0.9;
    }
    
    this.vy += 0.5; // gravity
    
    this.x += this.vx;
    this.y += this.vy;
    
    for (let p of platforms) {
      if (this.x > p.x && this.x < p.x + p.w && this.y + 10 > p.y && this.y + 10 < p.y + p.h) {
        this.y = p.y - 10;
        this.vy = 0;
      }
    }
    
    if (this.y > height) {
      this.reset();
    }
  }
  
  show() {
    fill(this.color);
    ellipse(this.x, this.y, 20, 20);
  }
}

class Platform {
  constructor(x, y, w, h) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
  }
  
  show() {
    fill(100);
    rect(this.x, this.y, this.w, this.h);
  }
}
